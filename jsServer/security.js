

			function gf_binary_to_hex(valor_binario){
				var hex = "";
				switch(valor_binario){
					case "00000000": hex = "00"; break;
					case "00000001": hex = "01"; break;
					case "00000010": hex = "02"; break;
					case "00000011": hex = "03"; break;
					case "00000100": hex = "04"; break;
					case "00000101": hex = "05"; break;
					case "00000110": hex = "06"; break;
					case "00000111": hex = "07"; break;
					case "00001000": hex = "08"; break;
					case "00001001": hex = "09"; break;
					case "00001010": hex = "0A"; break;
					case "00001011": hex = "0B"; break;
					case "00001100": hex = "0C"; break;
					case "00001101": hex = "0D"; break;
					case "00001110": hex = "0E"; break;
					case "00001111": hex = "0F"; break;
					case "00010000": hex = "10"; break;
					case "00010001": hex = "11"; break;
					case "00010010": hex = "12"; break;
					case "00010011": hex = "13"; break;
					case "00010100": hex = "14"; break;
					case "00010101": hex = "15"; break;
					case "00010110": hex = "16"; break;
					case "00010111": hex = "17"; break;
					case "00011000": hex = "18"; break;
					case "00011001": hex = "19"; break;
					case "00011010": hex = "1A"; break;
					case "00011011": hex = "1B"; break;
					case "00011100": hex = "1C"; break;
					case "00011101": hex = "1D"; break;
					case "00011110": hex = "1E"; break;
					case "00011111": hex = "1F"; break;
					case "00100000": hex = "20"; break;
					case "00100001": hex = "21"; break;
					case "00100010": hex = "22"; break;
					case "00100011": hex = "23"; break;
					case "00100100": hex = "24"; break;
					case "00100101": hex = "25"; break;
					case "00100110": hex = "26"; break;
					case "00100111": hex = "27"; break;
					case "00101000": hex = "28"; break;
					case "00101001": hex = "29"; break;
					case "00101010": hex = "2A"; break;
					case "00101011": hex = "2B"; break;
					case "00101100": hex = "2C"; break;
					case "00101101": hex = "2D"; break;
					case "00101110": hex = "2E"; break;
					case "00101111": hex = "2F"; break;
					case "00110000": hex = "30"; break;
					case "00110001": hex = "31"; break;
					case "00110010": hex = "32"; break;
					case "00110011": hex = "33"; break;
					case "00110100": hex = "34"; break;
					case "00110101": hex = "35"; break;
					case "00110110": hex = "36"; break;
					case "00110111": hex = "37"; break;
					case "00111000": hex = "38"; break;
					case "00111001": hex = "39"; break;
					case "00111010": hex = "3A"; break;
					case "00111011": hex = "3B"; break;
					case "00111100": hex = "3C"; break;
					case "00111101": hex = "3D"; break;
					case "00111110": hex = "3E"; break;
					case "00111111": hex = "3F"; break;
					case "01000000": hex = "40"; break;
					case "01000001": hex = "41"; break;
					case "01000010": hex = "42"; break;
					case "01000011": hex = "43"; break;
					case "01000100": hex = "44"; break;
					case "01000101": hex = "45"; break;
					case "01000110": hex = "46"; break;
					case "01000111": hex = "47"; break;
					case "01001000": hex = "48"; break;
					case "01001001": hex = "49"; break;
					case "01001010": hex = "4A"; break;
					case "01001011": hex = "4B"; break;
					case "01001100": hex = "4C"; break;
					case "01001101": hex = "4D"; break;
					case "01001110": hex = "4E"; break;
					case "01001111": hex = "4F"; break;
					case "01010000": hex = "50"; break;
					case "01010001": hex = "51"; break;
					case "01010010": hex = "52"; break;
					case "01010011": hex = "53"; break;
					case "01010100": hex = "54"; break;
					case "01010101": hex = "55"; break;
					case "01010110": hex = "56"; break;
					case "01010111": hex = "57"; break;
					case "01011000": hex = "58"; break;
					case "01011001": hex = "59"; break;
					case "01011010": hex = "5A"; break;
					case "01011011": hex = "5B"; break;
					case "01011100": hex = "5C"; break;
					case "01011101": hex = "5D"; break;
					case "01011110": hex = "5E"; break;
					case "01011111": hex = "5F"; break;
					case "01100000": hex = "60"; break;
					case "01100001": hex = "61"; break;
					case "01100010": hex = "62"; break;
					case "01100011": hex = "63"; break;
					case "01100100": hex = "64"; break;
					case "01100101": hex = "65"; break;
					case "01100110": hex = "66"; break;
					case "01100111": hex = "67"; break;
					case "01101000": hex = "68"; break;
					case "01101001": hex = "69"; break;
					case "01101010": hex = "6A"; break;
					case "01101011": hex = "6B"; break;
					case "01101100": hex = "6C"; break;
					case "01101101": hex = "6D"; break;
					case "01101110": hex = "6E"; break;
					case "01101111": hex = "6F"; break;
					case "01110000": hex = "70"; break;
					case "01110001": hex = "71"; break;
					case "01110010": hex = "72"; break;
					case "01110011": hex = "73"; break;
					case "01110100": hex = "74"; break;
					case "01110101": hex = "75"; break;
					case "01110110": hex = "76"; break;
					case "01110111": hex = "77"; break;
					case "01111000": hex = "78"; break;
					case "01111001": hex = "79"; break;
					case "01111010": hex = "7A"; break;
					case "01111011": hex = "7B"; break;
					case "01111100": hex = "7C"; break;
					case "01111101": hex = "7D"; break;
					case "01111110": hex = "7E"; break;
					case "01111111": hex = "7F"; break;
					case "10000000": hex = "80"; break;
					case "10000001": hex = "81"; break;
					case "10000010": hex = "82"; break;
					case "10000011": hex = "83"; break;
					case "10000100": hex = "84"; break;
					case "10000101": hex = "85"; break;
					case "10000110": hex = "86"; break;
					case "10000111": hex = "87"; break;
					case "10001000": hex = "88"; break;
					case "10001001": hex = "89"; break;
					case "10001010": hex = "8A"; break;
					case "10001011": hex = "8B"; break;
					case "10001100": hex = "8C"; break;
					case "10001101": hex = "8D"; break;
					case "10001110": hex = "8E"; break;
					case "10001111": hex = "8F"; break;
					case "10010000": hex = "90"; break;
					case "10010001": hex = "91"; break;
					case "10010010": hex = "92"; break;
					case "10010011": hex = "93"; break;
					case "10010100": hex = "94"; break;
					case "10010101": hex = "95"; break;
					case "10010110": hex = "96"; break;
					case "10010111": hex = "97"; break;
					case "10011000": hex = "98"; break;
					case "10011001": hex = "99"; break;
					case "10011010": hex = "9A"; break;
					case "10011011": hex = "9B"; break;
					case "10011100": hex = "9C"; break;
					case "10011101": hex = "9D"; break;
					case "10011110": hex = "9E"; break;
					case "10011111": hex = "9F"; break;
					case "10100000": hex = "A0"; break;
					case "10100001": hex = "A1"; break;
					case "10100010": hex = "A2"; break;
					case "10100011": hex = "A3"; break;
					case "10100100": hex = "A4"; break;
					case "10100101": hex = "A5"; break;
					case "10100110": hex = "A6"; break;
					case "10100111": hex = "A7"; break;
					case "10101000": hex = "A8"; break;
					case "10101001": hex = "A9"; break;
					case "10101010": hex = "AA"; break;
					case "10101011": hex = "AB"; break;
					case "10101100": hex = "AC"; break;
					case "10101101": hex = "AD"; break;
					case "10101110": hex = "AE"; break;
					case "10101111": hex = "AF"; break;
					case "10110000": hex = "B0"; break;
					case "10110001": hex = "B1"; break;
					case "10110010": hex = "B2"; break;
					case "10110011": hex = "B3"; break;
					case "10110100": hex = "B4"; break;
					case "10110101": hex = "B5"; break;
					case "10110110": hex = "B6"; break;
					case "10110111": hex = "B7"; break;
					case "10111000": hex = "B8"; break;
					case "10111001": hex = "B9"; break;
					case "10111010": hex = "BA"; break;
					case "10111011": hex = "BB"; break;
					case "10111100": hex = "BC"; break;
					case "10111101": hex = "BD"; break;
					case "10111110": hex = "BE"; break;
					case "10111111": hex = "BF"; break;
					case "11000000": hex = "C0"; break;
					case "11000001": hex = "C1"; break;
					case "11000010": hex = "C2"; break;
					case "11000011": hex = "C3"; break;
					case "11000100": hex = "C4"; break;
					case "11000101": hex = "C5"; break;
					case "11000110": hex = "C6"; break;
					case "11000111": hex = "C7"; break;
					case "11001000": hex = "C8"; break;
					case "11001001": hex = "C9"; break;
					case "11001010": hex = "CA"; break;
					case "11001011": hex = "CB"; break;
					case "11001100": hex = "CC"; break;
					case "11001101": hex = "CD"; break;
					case "11001110": hex = "CE"; break;
					case "11001111": hex = "CF"; break;
					case "11010000": hex = "D0"; break;
					case "11010001": hex = "D1"; break;
					case "11010010": hex = "D2"; break;
					case "11010011": hex = "D3"; break;
					case "11010100": hex = "D4"; break;
					case "11010101": hex = "D5"; break;
					case "11010110": hex = "D6"; break;
					case "11010111": hex = "D7"; break;
					case "11011000": hex = "D8"; break;
					case "11011001": hex = "D9"; break;
					case "11011010": hex = "DA"; break;
					case "11011011": hex = "DB"; break;
					case "11011100": hex = "DC"; break;
					case "11011101": hex = "DD"; break;
					case "11011110": hex = "DE"; break;
					case "11011111": hex = "DF"; break;
					case "11100000": hex = "E0"; break;
					case "11100001": hex = "E1"; break;
					case "11100010": hex = "E2"; break;
					case "11100011": hex = "E3"; break;
					case "11100100": hex = "E4"; break;
					case "11100101": hex = "E5"; break;
					case "11100110": hex = "E6"; break;
					case "11100111": hex = "E7"; break;
					case "11101000": hex = "E8"; break;
					case "11101001": hex = "E9"; break;
					case "11101010": hex = "EA"; break;
					case "11101011": hex = "EB"; break;
					case "11101100": hex = "EC"; break;
					case "11101101": hex = "ED"; break;
					case "11101110": hex = "EE"; break;
					case "11101111": hex = "EF"; break;
					case "11110000": hex = "F0"; break;
					case "11110001": hex = "F1"; break;
					case "11110010": hex = "F2"; break;
					case "11110011": hex = "F3"; break;
					case "11110100": hex = "F4"; break;
					case "11110101": hex = "F5"; break;
					case "11110110": hex = "F6"; break;
					case "11110111": hex = "F7"; break;
					case "11111000": hex = "F8"; break;
					case "11111001": hex = "F9"; break;
					case "11111010": hex = "FA"; break;
					case "11111011": hex = "FB"; break;
					case "11111100": hex = "FC"; break;
					case "11111101": hex = "FD"; break;
					case "11111110": hex = "FE"; break;
					case "11111111": hex = "FF"; break;
				}
				return hex;
			}

			function gf_ascii_to_binary(valor_ascii){
				var valor_binario = "";
				switch(valor_ascii){
					case 0: valor_binario = "00000000"; break;
					case 1: valor_binario = "00000001"; break;
					case 2: valor_binario = "00000010"; break;
					case 3: valor_binario = "00000011"; break;
					case 4: valor_binario = "00000100"; break;
					case 5: valor_binario = "00000101"; break;
					case 6: valor_binario = "00000110"; break;
					case 7: valor_binario = "00000111"; break;
					case 8: valor_binario = "00001000"; break;
					case 9: valor_binario = "00001001"; break;
					case 10: valor_binario = "00001010"; break;
					case 11: valor_binario = "00001011"; break;
					case 12: valor_binario = "00001100"; break;
					case 13: valor_binario = "00001101"; break;
					case 14: valor_binario = "00001110"; break;
					case 15: valor_binario = "00001111"; break;
					case 16: valor_binario = "00010000"; break;
					case 17: valor_binario = "00010001"; break;
					case 18: valor_binario = "00010010"; break;
					case 19: valor_binario = "00010011"; break;
					case 20: valor_binario = "00010100"; break;
					case 21: valor_binario = "00010101"; break;
					case 22: valor_binario = "00010110"; break;
					case 23: valor_binario = "00010111"; break;
					case 24: valor_binario = "00011000"; break;
					case 25: valor_binario = "00011001"; break;
					case 26: valor_binario = "00011010"; break;
					case 27: valor_binario = "00011011"; break;
					case 28: valor_binario = "00011100"; break;
					case 29: valor_binario = "00011101"; break;
					case 30: valor_binario = "00011110"; break;
					case 31: valor_binario = "00011111"; break;
					case 32: valor_binario = "00100000"; break;
					case 33: valor_binario = "00100001"; break;
					case 34: valor_binario = "00100010"; break;
					case 35: valor_binario = "00100011"; break;
					case 36: valor_binario = "00100100"; break;
					case 37: valor_binario = "00100101"; break;
					case 38: valor_binario = "00100110"; break;
					case 39: valor_binario = "00100111"; break;
					case 40: valor_binario = "00101000"; break;
					case 41: valor_binario = "00101001"; break;
					case 42: valor_binario = "00101010"; break;
					case 43: valor_binario = "00101011"; break;
					case 44: valor_binario = "00101100"; break;
					case 45: valor_binario = "00101101"; break;
					case 46: valor_binario = "00101110"; break;
					case 47: valor_binario = "00101111"; break;
					case 48: valor_binario = "00110000"; break;
					case 49: valor_binario = "00110001"; break;
					case 50: valor_binario = "00110010"; break;
					case 51: valor_binario = "00110011"; break;
					case 52: valor_binario = "00110100"; break;
					case 53: valor_binario = "00110101"; break;
					case 54: valor_binario = "00110110"; break;
					case 55: valor_binario = "00110111"; break;
					case 56: valor_binario = "00111000"; break;
					case 57: valor_binario = "00111001"; break;
					case 58: valor_binario = "00111010"; break;
					case 59: valor_binario = "00111011"; break;
					case 60: valor_binario = "00111100"; break;
					case 61: valor_binario = "00111101"; break;
					case 62: valor_binario = "00111110"; break;
					case 63: valor_binario = "00111111"; break;
					case 64: valor_binario = "01000000"; break;
					case 65: valor_binario = "01000001"; break;
					case 66: valor_binario = "01000010"; break;
					case 67: valor_binario = "01000011"; break;
					case 68: valor_binario = "01000100"; break;
					case 69: valor_binario = "01000101"; break;
					case 70: valor_binario = "01000110"; break;
					case 71: valor_binario = "01000111"; break;
					case 72: valor_binario = "01001000"; break;
					case 73: valor_binario = "01001001"; break;
					case 74: valor_binario = "01001010"; break;
					case 75: valor_binario = "01001011"; break;
					case 76: valor_binario = "01001100"; break;
					case 77: valor_binario = "01001101"; break;
					case 78: valor_binario = "01001110"; break;
					case 79: valor_binario = "01001111"; break;
					case 80: valor_binario = "01010000"; break;
					case 81: valor_binario = "01010001"; break;
					case 82: valor_binario = "01010010"; break;
					case 83: valor_binario = "01010011"; break;
					case 84: valor_binario = "01010100"; break;
					case 85: valor_binario = "01010101"; break;
					case 86: valor_binario = "01010110"; break;
					case 87: valor_binario = "01010111"; break;
					case 88: valor_binario = "01011000"; break;
					case 89: valor_binario = "01011001"; break;
					case 90: valor_binario = "01011010"; break;
					case 91: valor_binario = "01011011"; break;
					case 92: valor_binario = "01011100"; break;
					case 93: valor_binario = "01011101"; break;
					case 94: valor_binario = "01011110"; break;
					case 95: valor_binario = "01011111"; break;
					case 96: valor_binario = "01100000"; break;
					case 97: valor_binario = "01100001"; break;
					case 98: valor_binario = "01100010"; break;
					case 99: valor_binario = "01100011"; break;
					case 100: valor_binario = "01100100"; break;
					case 101: valor_binario = "01100101"; break;
					case 102: valor_binario = "01100110"; break;
					case 103: valor_binario = "01100111"; break;
					case 104: valor_binario = "01101000"; break;
					case 105: valor_binario = "01101001"; break;
					case 106: valor_binario = "01101010"; break;
					case 107: valor_binario = "01101011"; break;
					case 108: valor_binario = "01101100"; break;
					case 109: valor_binario = "01101101"; break;
					case 110: valor_binario = "01101110"; break;
					case 111: valor_binario = "01101111"; break;
					case 112: valor_binario = "01110000"; break;
					case 113: valor_binario = "01110001"; break;
					case 114: valor_binario = "01110010"; break;
					case 115: valor_binario = "01110011"; break;
					case 116: valor_binario = "01110100"; break;
					case 117: valor_binario = "01110101"; break;
					case 118: valor_binario = "01110110"; break;
					case 119: valor_binario = "01110111"; break;
					case 120: valor_binario = "01111000"; break;
					case 121: valor_binario = "01111001"; break;
					case 122: valor_binario = "01111010"; break;
					case 123: valor_binario = "01111011"; break;
					case 124: valor_binario = "01111100"; break;
					case 125: valor_binario = "01111101"; break;
					case 126: valor_binario = "01111110"; break;
					case 127: valor_binario = "01111111"; break;
					case 128: valor_binario = "10000000"; break;
					case 129: valor_binario = "10000001"; break;
					case 130: valor_binario = "10000010"; break;
					case 131: valor_binario = "10000011"; break;
					case 132: valor_binario = "10000100"; break;
					case 133: valor_binario = "10000101"; break;
					case 134: valor_binario = "10000110"; break;
					case 135: valor_binario = "10000111"; break;
					case 136: valor_binario = "10001000"; break;
					case 137: valor_binario = "10001001"; break;
					case 138: valor_binario = "10001010"; break;
					case 139: valor_binario = "10001011"; break;
					case 140: valor_binario = "10001100"; break;
					case 141: valor_binario = "10001101"; break;
					case 142: valor_binario = "10001110"; break;
					case 143: valor_binario = "10001111"; break;
					case 144: valor_binario = "10010000"; break;
					case 145: valor_binario = "10010001"; break;
					case 146: valor_binario = "10010010"; break;
					case 147: valor_binario = "10010011"; break;
					case 148: valor_binario = "10010100"; break;
					case 149: valor_binario = "10010101"; break;
					case 150: valor_binario = "10010110"; break;
					case 151: valor_binario = "10010111"; break;
					case 152: valor_binario = "10011000"; break;
					case 153: valor_binario = "10011001"; break;
					case 154: valor_binario = "10011010"; break;
					case 155: valor_binario = "10011011"; break;
					case 156: valor_binario = "10011100"; break;
					case 157: valor_binario = "10011101"; break;
					case 158: valor_binario = "10011110"; break;
					case 159: valor_binario = "10011111"; break;
					case 160: valor_binario = "10100000"; break;
					case 161: valor_binario = "10100001"; break;
					case 162: valor_binario = "10100010"; break;
					case 163: valor_binario = "10100011"; break;
					case 164: valor_binario = "10100100"; break;
					case 165: valor_binario = "10100101"; break;
					case 166: valor_binario = "10100110"; break;
					case 167: valor_binario = "10100111"; break;
					case 168: valor_binario = "10101000"; break;
					case 169: valor_binario = "10101001"; break;
					case 170: valor_binario = "10101010"; break;
					case 171: valor_binario = "10101011"; break;
					case 172: valor_binario = "10101100"; break;
					case 173: valor_binario = "10101101"; break;
					case 174: valor_binario = "10101110"; break;
					case 175: valor_binario = "10101111"; break;
					case 176: valor_binario = "10110000"; break;
					case 177: valor_binario = "10110001"; break;
					case 178: valor_binario = "10110010"; break;
					case 179: valor_binario = "10110011"; break;
					case 180: valor_binario = "10110100"; break;
					case 181: valor_binario = "10110101"; break;
					case 182: valor_binario = "10110110"; break;
					case 183: valor_binario = "10110111"; break;
					case 184: valor_binario = "10111000"; break;
					case 185: valor_binario = "10111001"; break;
					case 186: valor_binario = "10111010"; break;
					case 187: valor_binario = "10111011"; break;
					case 188: valor_binario = "10111100"; break;
					case 189: valor_binario = "10111101"; break;
					case 190: valor_binario = "10111110"; break;
					case 191: valor_binario = "10111111"; break;
					case 192: valor_binario = "11000000"; break;
					case 193: valor_binario = "11000001"; break;
					case 194: valor_binario = "11000010"; break;
					case 195: valor_binario = "11000011"; break;
					case 196: valor_binario = "11000100"; break;
					case 197: valor_binario = "11000101"; break;
					case 198: valor_binario = "11000110"; break;
					case 199: valor_binario = "11000111"; break;
					case 200: valor_binario = "11001000"; break;
					case 201: valor_binario = "11001001"; break;
					case 202: valor_binario = "11001010"; break;
					case 203: valor_binario = "11001011"; break;
					case 204: valor_binario = "11001100"; break;
					case 205: valor_binario = "11001101"; break;
					case 206: valor_binario = "11001110"; break;
					case 207: valor_binario = "11001111"; break;
					case 208: valor_binario = "11010000"; break;
					case 209: valor_binario = "11010001"; break;
					case 210: valor_binario = "11010010"; break;
					case 211: valor_binario = "11010011"; break;
					case 212: valor_binario = "11010100"; break;
					case 213: valor_binario = "11010101"; break;
					case 214: valor_binario = "11010110"; break;
					case 215: valor_binario = "11010111"; break;
					case 216: valor_binario = "11011000"; break;
					case 217: valor_binario = "11011001"; break;
					case 218: valor_binario = "11011010"; break;
					case 219: valor_binario = "11011011"; break;
					case 220: valor_binario = "11011100"; break;
					case 221: valor_binario = "11011101"; break;
					case 222: valor_binario = "11011110"; break;
					case 223: valor_binario = "11011111"; break;
					case 224: valor_binario = "11100000"; break;
					case 225: valor_binario = "11100001"; break;
					case 226: valor_binario = "11100010"; break;
					case 227: valor_binario = "11100011"; break;
					case 228: valor_binario = "11100100"; break;
					case 229: valor_binario = "11100101"; break;
					case 230: valor_binario = "11100110"; break;
					case 231: valor_binario = "11100111"; break;
					case 232: valor_binario = "11101000"; break;
					case 233: valor_binario = "11101001"; break;
					case 234: valor_binario = "11101010"; break;
					case 235: valor_binario = "11101011"; break;
					case 236: valor_binario = "11101100"; break;
					case 237: valor_binario = "11101101"; break;
					case 238: valor_binario = "11101110"; break;
					case 239: valor_binario = "11101111"; break;
					case 240: valor_binario = "11110000"; break;
					case 241: valor_binario = "11110001"; break;
					case 242: valor_binario = "11110010"; break;
					case 243: valor_binario = "11110011"; break;
					case 244: valor_binario = "11110100"; break;
					case 245: valor_binario = "11110101"; break;
					case 246: valor_binario = "11110110"; break;
					case 247: valor_binario = "11110111"; break;
					case 248: valor_binario = "11111000"; break;
					case 249: valor_binario = "11111001"; break;
					case 250: valor_binario = "11111010"; break;
					case 251: valor_binario = "11111011"; break;
					case 252: valor_binario = "11111100"; break;
					case 253: valor_binario = "11111101"; break;
					case 254: valor_binario = "11111110"; break;
					case 255: valor_binario = "11111111"; break;
					default: valor_binario = "11111111";
				}
				return valor_binario;
			} 
			
			function ord (string) {
			  var str = string + '';
			  var code = str.charCodeAt(0);
			  //console.log( string, code, 'code1',0xD800, code >= 0xD800, 'code2', 0xDBFF, code <= 0xDBFF );
			  if (code >= 0xD800 && code <= 0xDBFF) {
				var hi = code;
				if (str.length === 1) {
				  return code;
				}
				var low = str.charCodeAt(1)
				return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000
			  }
			  if (code >= 0xDC00 && code <= 0xDFFF) {
				return code
			  }
			  return code
			}
			
			
			
			/*
			 * desencriptado
			 */
			 
			
function gf_hex_to_binary(valor_binario){
	var hex = "";
	switch(valor_binario){
		case "00": hex = "00000000"; break;
		case "01": hex = "00000001"; break;
		case "02": hex = "00000010"; break;
		case "03": hex = "00000011"; break;
		case "04": hex = "00000100"; break;
		case "05": hex = "00000101"; break;
		case "06": hex = "00000110"; break;
		case "07": hex = "00000111"; break;
		case "08": hex = "00001000"; break;
		case "09": hex = "00001001"; break;
		case "0A": hex = "00001010"; break;
		case "0B": hex = "00001011"; break;
		case "0C": hex = "00001100"; break;
		case "0D": hex = "00001101"; break;
		case "0E": hex = "00001110"; break;
		case "0F": hex = "00001111"; break;
		case "10": hex = "00010000"; break;
		case "11": hex = "00010001"; break;
		case "12": hex = "00010010"; break;
		case "13": hex = "00010011"; break;
		case "14": hex = "00010100"; break;
		case "15": hex = "00010101"; break;
		case "16": hex = "00010110"; break;
		case "17": hex = "00010111"; break;
		case "18": hex = "00011000"; break;
		case "19": hex = "00011001"; break;
		case "1A": hex = "00011010"; break;
		case "1B": hex = "00011011"; break;
		case "1C": hex = "00011100"; break;
		case "1D": hex = "00011101"; break;
		case "1E": hex = "00011110"; break;
		case "1F": hex = "00011111"; break;
		case "20": hex = "00100000"; break;
		case "21": hex = "00100001"; break;
		case "22": hex = "00100010"; break;
		case "23": hex = "00100011"; break;
		case "24": hex = "00100100"; break;
		case "25": hex = "00100101"; break;
		case "26": hex = "00100110"; break;
		case "27": hex = "00100111"; break;
		case "28": hex = "00101000"; break;
		case "29": hex = "00101001"; break;
		case "2A": hex = "00101010"; break;
		case "2B": hex = "00101011"; break;
		case "2C": hex = "00101100"; break;
		case "2D": hex = "00101101"; break;
		case "2E": hex = "00101110"; break;
		case "2F": hex = "00101111"; break;
		case "30": hex = "00110000"; break;
		case "31": hex = "00110001"; break;
		case "32": hex = "00110010"; break;
		case "33": hex = "00110011"; break;
		case "34": hex = "00110100"; break;
		case "35": hex = "00110101"; break;
		case "36": hex = "00110110"; break;
		case "37": hex = "00110111"; break;
		case "38": hex = "00111000"; break;
		case "39": hex = "00111001"; break;
		case "3A": hex = "00111010"; break;
		case "3B": hex = "00111011"; break;
		case "3C": hex = "00111100"; break;
		case "3D": hex = "00111101"; break;
		case "3E": hex = "00111110"; break;
		case "3F": hex = "00111111"; break;
		case "40": hex = "01000000"; break;
		case "41": hex = "01000001"; break;
		case "42": hex = "01000010"; break;
		case "43": hex = "01000011"; break;
		case "44": hex = "01000100"; break;
		case "45": hex = "01000101"; break;
		case "46": hex = "01000110"; break;
		case "47": hex = "01000111"; break;
		case "48": hex = "01001000"; break;
		case "49": hex = "01001001"; break;
		case "4A": hex = "01001010"; break;
		case "4B": hex = "01001011"; break;
		case "4C": hex = "01001100"; break;
		case "4D": hex = "01001101"; break;
		case "4E": hex = "01001110"; break;
		case "4F": hex = "01001111"; break;
		case "50": hex = "01010000"; break;
		case "51": hex = "01010001"; break;
		case "52": hex = "01010010"; break;
		case "53": hex = "01010011"; break;
		case "54": hex = "01010100"; break;
		case "55": hex = "01010101"; break;
		case "56": hex = "01010110"; break;
		case "57": hex = "01010111"; break;
		case "58": hex = "01011000"; break;
		case "59": hex = "01011001"; break;
		case "5A": hex = "01011010"; break;
		case "5B": hex = "01011011"; break;
		case "5C": hex = "01011100"; break;
		case "5D": hex = "01011101"; break;
		case "5E": hex = "01011110"; break;
		case "5F": hex = "01011111"; break;
		case "60": hex = "01100000"; break;
		case "61": hex = "01100001"; break;
		case "62": hex = "01100010"; break;
		case "63": hex = "01100011"; break;
		case "64": hex = "01100100"; break;
		case "65": hex = "01100101"; break;
		case "66": hex = "01100110"; break;
		case "67": hex = "01100111"; break;
		case "68": hex = "01101000"; break;
		case "69": hex = "01101001"; break;
		case "6A": hex = "01101010"; break;
		case "6B": hex = "01101011"; break;
		case "6C": hex = "01101100"; break;
		case "6D": hex = "01101101"; break;
		case "6E": hex = "01101110"; break;
		case "6F": hex = "01101111"; break;
		case "70": hex = "01110000"; break;
		case "71": hex = "01110001"; break;
		case "72": hex = "01110010"; break;
		case "73": hex = "01110011"; break;
		case "74": hex = "01110100"; break;
		case "75": hex = "01110101"; break;
		case "76": hex = "01110110"; break;
		case "77": hex = "01110111"; break;
		case "78": hex = "01111000"; break;
		case "79": hex = "01111001"; break;
		case "7A": hex = "01111010"; break;
		case "7B": hex = "01111011"; break;
		case "7C": hex = "01111100"; break;
		case "7D": hex = "01111101"; break;
		case "7E": hex = "01111110"; break;
		case "7F": hex = "01111111"; break;
		case "80": hex = "10000000"; break;
		case "81": hex = "10000001"; break;
		case "82": hex = "10000010"; break;
		case "83": hex = "10000011"; break;
		case "84": hex = "10000100"; break;
		case "85": hex = "10000101"; break;
		case "86": hex = "10000110"; break;
		case "87": hex = "10000111"; break;
		case "88": hex = "10001000"; break;
		case "89": hex = "10001001"; break;
		case "8A": hex = "10001010"; break;
		case "8B": hex = "10001011"; break;
		case "8C": hex = "10001100"; break;
		case "8D": hex = "10001101"; break;
		case "8E": hex = "10001110"; break;
		case "8F": hex = "10001111"; break;
		case "90": hex = "10010000"; break;
		case "91": hex = "10010001"; break;
		case "92": hex = "10010010"; break;
		case "93": hex = "10010011"; break;
		case "94": hex = "10010100"; break;
		case "95": hex = "10010101"; break;
		case "96": hex = "10010110"; break;
		case "97": hex = "10010111"; break;
		case "98": hex = "10011000"; break;
		case "99": hex = "10011001"; break;
		case "9A": hex = "10011010"; break;
		case "9B": hex = "10011011"; break;
		case "9C": hex = "10011100"; break;
		case "9D": hex = "10011101"; break;
		case "9E": hex = "10011110"; break;
		case "9F": hex = "10011111"; break;
		case "A0": hex = "10100000"; break;
		case "A1": hex = "10100001"; break;
		case "A2": hex = "10100010"; break;
		case "A3": hex = "10100011"; break;
		case "A4": hex = "10100100"; break;
		case "A5": hex = "10100101"; break;
		case "A6": hex = "10100110"; break;
		case "A7": hex = "10100111"; break;
		case "A8": hex = "10101000"; break;
		case "A9": hex = "10101001"; break;
		case "AA": hex = "10101010"; break;
		case "AB": hex = "10101011"; break;
		case "AC": hex = "10101100"; break;
		case "AD": hex = "10101101"; break;
		case "AE": hex = "10101110"; break;
		case "AF": hex = "10101111"; break;
		case "B0": hex = "10110000"; break;
		case "B1": hex = "10110001"; break;
		case "B2": hex = "10110010"; break;
		case "B3": hex = "10110011"; break;
		case "B4": hex = "10110100"; break;
		case "B5": hex = "10110101"; break;
		case "B6": hex = "10110110"; break;
		case "B7": hex = "10110111"; break;
		case "B8": hex = "10111000"; break;
		case "B9": hex = "10111001"; break;
		case "BA": hex = "10111010"; break;
		case "BB": hex = "10111011"; break;
		case "BC": hex = "10111100"; break;
		case "BD": hex = "10111101"; break;
		case "BE": hex = "10111110"; break;
		case "BF": hex = "10111111"; break;
		case "C0": hex = "11000000"; break;
		case "C1": hex = "11000001"; break;
		case "C2": hex = "11000010"; break;
		case "C3": hex = "11000011"; break;
		case "C4": hex = "11000100"; break;
		case "C5": hex = "11000101"; break;
		case "C6": hex = "11000110"; break;
		case "C7": hex = "11000111"; break;
		case "C8": hex = "11001000"; break;
		case "C9": hex = "11001001"; break;
		case "CA": hex = "11001010"; break;
		case "CB": hex = "11001011"; break;
		case "CC": hex = "11001100"; break;
		case "CD": hex = "11001101"; break;
		case "CE": hex = "11001110"; break;
		case "CF": hex = "11001111"; break;
		case "D0": hex = "11010000"; break;
		case "D1": hex = "11010001"; break;
		case "D2": hex = "11010010"; break;
		case "D3": hex = "11010011"; break;
		case "D4": hex = "11010100"; break;
		case "D5": hex = "11010101"; break;
		case "D6": hex = "11010110"; break;
		case "D7": hex = "11010111"; break;
		case "D8": hex = "11011000"; break;
		case "D9": hex = "11011001"; break;
		case "DA": hex = "11011010"; break;
		case "DB": hex = "11011011"; break;
		case "DC": hex = "11011100"; break;
		case "DD": hex = "11011101"; break;
		case "DE": hex = "11011110"; break;
		case "DF": hex = "11011111"; break;
		case "E0": hex = "11100000"; break;
		case "E1": hex = "11100001"; break;
		case "E2": hex = "11100010"; break;
		case "E3": hex = "11100011"; break;
		case "E4": hex = "11100100"; break;
		case "E5": hex = "11100101"; break;
		case "E6": hex = "11100110"; break;
		case "E7": hex = "11100111"; break;
		case "E8": hex = "11101000"; break;
		case "E9": hex = "11101001"; break;
		case "EA": hex = "11101010"; break;
		case "EB": hex = "11101011"; break;
		case "EC": hex = "11101100"; break;
		case "ED": hex = "11101101"; break;
		case "EE": hex = "11101110"; break;
		case "EF": hex = "11101111"; break;
		case "F0": hex = "11110000"; break;
		case "F1": hex = "11110001"; break;
		case "F2": hex = "11110010"; break;
		case "F3": hex = "11110011"; break;
		case "F4": hex = "11110100"; break;
		case "F5": hex = "11110101"; break;
		case "F6": hex = "11110110"; break;
		case "F7": hex = "11110111"; break;
		case "F8": hex = "11111000"; break;
		case "F9": hex = "11111001"; break;
		case "FA": hex = "11111010"; break;
		case "FB": hex = "11111011"; break;
		case "FC": hex = "11111100"; break;
		case "FD": hex = "11111101"; break;
		case "FE": hex = "11111110"; break;
		case "FF": hex = "11111111"; break;
	}
	return hex;
}






function gf_binary_to_ascii(valor_ascii){
	var valor_binario = "";
	switch(valor_ascii){
		case  "00000000": valor_binario =   0; break;
		case  "00000001": valor_binario =   1; break;
		case  "00000010": valor_binario =   2; break;
		case  "00000011": valor_binario =   3; break;
		case  "00000100": valor_binario =   4; break;
		case  "00000101": valor_binario =   5; break;
		case  "00000110": valor_binario =   6; break;
		case  "00000111": valor_binario =   7; break;
		case  "00001000": valor_binario =   8; break;
		case  "00001001": valor_binario =   9; break;
		case  "00001010": valor_binario =  10; break;
		case  "00001011": valor_binario =  11; break;
		case  "00001100": valor_binario =  12; break;
		case  "00001101": valor_binario =  13; break;
		case  "00001110": valor_binario =  14; break;
		case  "00001111": valor_binario =  15; break;
		case  "00010000": valor_binario =  16; break;
		case  "00010001": valor_binario =  17; break;
		case  "00010010": valor_binario =  18; break;
		case  "00010011": valor_binario =  19; break;
		case  "00010100": valor_binario =  20; break;
		case  "00010101": valor_binario =  21; break;
		case  "00010110": valor_binario =  22; break;
		case  "00010111": valor_binario =  23; break;
		case  "00011000": valor_binario =  24; break;
		case  "00011001": valor_binario =  25; break;
		case  "00011010": valor_binario =  26; break;
		case  "00011011": valor_binario =  27; break;
		case  "00011100": valor_binario =  28; break;
		case  "00011101": valor_binario =  29; break;
		case  "00011110": valor_binario =  30; break;
		case  "00011111": valor_binario =  31; break;
		case  "00100000": valor_binario =  32; break;
		case  "00100001": valor_binario =  33; break;
		case  "00100010": valor_binario =  34; break;
		case  "00100011": valor_binario =  35; break;
		case  "00100100": valor_binario =  36; break;
		case  "00100101": valor_binario =  37; break;
		case  "00100110": valor_binario =  38; break;
		case  "00100111": valor_binario =  39; break;
		case  "00101000": valor_binario =  40; break;
		case  "00101001": valor_binario =  41; break;
		case  "00101010": valor_binario =  42; break;
		case  "00101011": valor_binario =  43; break;
		case  "00101100": valor_binario =  44; break;
		case  "00101101": valor_binario =  45; break;
		case  "00101110": valor_binario =  46; break;
		case  "00101111": valor_binario =  47; break;
		case  "00110000": valor_binario =  48; break;
		case  "00110001": valor_binario =  49; break;
		case  "00110010": valor_binario =  50; break;
		case  "00110011": valor_binario =  51; break;
		case  "00110100": valor_binario =  52; break;
		case  "00110101": valor_binario =  53; break;
		case  "00110110": valor_binario =  54; break;
		case  "00110111": valor_binario =  55; break;
		case  "00111000": valor_binario =  56; break;
		case  "00111001": valor_binario =  57; break;
		case  "00111010": valor_binario =  58; break;
		case  "00111011": valor_binario =  59; break;
		case  "00111100": valor_binario =  60; break;
		case  "00111101": valor_binario =  61; break;
		case  "00111110": valor_binario =  62; break;
		case  "00111111": valor_binario =  63; break;
		case  "01000000": valor_binario =  64; break;
		case  "01000001": valor_binario =  65; break;
		case  "01000010": valor_binario =  66; break;
		case  "01000011": valor_binario =  67; break;
		case  "01000100": valor_binario =  68; break;
		case  "01000101": valor_binario =  69; break;
		case  "01000110": valor_binario =  70; break;
		case  "01000111": valor_binario =  71; break;
		case  "01001000": valor_binario =  72; break;
		case  "01001001": valor_binario =  73; break;
		case  "01001010": valor_binario =  74; break;
		case  "01001011": valor_binario =  75; break;
		case  "01001100": valor_binario =  76; break;
		case  "01001101": valor_binario =  77; break;
		case  "01001110": valor_binario =  78; break;
		case  "01001111": valor_binario =  79; break;
		case  "01010000": valor_binario =  80; break;
		case  "01010001": valor_binario =  81; break;
		case  "01010010": valor_binario =  82; break;
		case  "01010011": valor_binario =  83; break;
		case  "01010100": valor_binario =  84; break;
		case  "01010101": valor_binario =  85; break;
		case  "01010110": valor_binario =  86; break;
		case  "01010111": valor_binario =  87; break;
		case  "01011000": valor_binario =  88; break;
		case  "01011001": valor_binario =  89; break;
		case  "01011010": valor_binario =  90; break;
		case  "01011011": valor_binario =  91; break;
		case  "01011100": valor_binario =  92; break;
		case  "01011101": valor_binario =  93; break;
		case  "01011110": valor_binario =  94; break;
		case  "01011111": valor_binario =  95; break;
		case  "01100000": valor_binario =  96; break;
		case  "01100001": valor_binario =  97; break;
		case  "01100010": valor_binario =  98; break;
		case  "01100011": valor_binario =  99; break;
		case  "01100100": valor_binario = 100; break;
		case  "01100101": valor_binario = 101; break;
		case  "01100110": valor_binario = 102; break;
		case  "01100111": valor_binario = 103; break;
		case  "01101000": valor_binario = 104; break;
		case  "01101001": valor_binario = 105; break;
		case  "01101010": valor_binario = 106; break;
		case  "01101011": valor_binario = 107; break;
		case  "01101100": valor_binario = 108; break;
		case  "01101101": valor_binario = 109; break;
		case  "01101110": valor_binario = 110; break;
		case  "01101111": valor_binario = 111; break;
		case  "01110000": valor_binario = 112; break;
		case  "01110001": valor_binario = 113; break;
		case  "01110010": valor_binario = 114; break;
		case  "01110011": valor_binario = 115; break;
		case  "01110100": valor_binario = 116; break;
		case  "01110101": valor_binario = 117; break;
		case  "01110110": valor_binario = 118; break;
		case  "01110111": valor_binario = 119; break;
		case  "01111000": valor_binario = 120; break;
		case  "01111001": valor_binario = 121; break;
		case  "01111010": valor_binario = 122; break;
		case  "01111011": valor_binario = 123; break;
		case  "01111100": valor_binario = 124; break;
		case  "01111101": valor_binario = 125; break;
		case  "01111110": valor_binario = 126; break;
		case  "01111111": valor_binario = 127; break;
		case  "10000000": valor_binario = 128; break;
		case  "10000001": valor_binario = 129; break;
		case  "10000010": valor_binario = 130; break;
		case  "10000011": valor_binario = 131; break;
		case  "10000100": valor_binario = 132; break;
		case  "10000101": valor_binario = 133; break;
		case  "10000110": valor_binario = 134; break;
		case  "10000111": valor_binario = 135; break;
		case  "10001000": valor_binario = 136; break;
		case  "10001001": valor_binario = 137; break;
		case  "10001010": valor_binario = 138; break;
		case  "10001011": valor_binario = 139; break;
		case  "10001100": valor_binario = 140; break;
		case  "10001101": valor_binario = 141; break;
		case  "10001110": valor_binario = 142; break;
		case  "10001111": valor_binario = 143; break;
		case  "10010000": valor_binario = 144; break;
		case  "10010001": valor_binario = 145; break;
		case  "10010010": valor_binario = 146; break;
		case  "10010011": valor_binario = 147; break;
		case  "10010100": valor_binario = 148; break;
		case  "10010101": valor_binario = 149; break;
		case  "10010110": valor_binario = 150; break;
		case  "10010111": valor_binario = 151; break;
		case  "10011000": valor_binario = 152; break;
		case  "10011001": valor_binario = 153; break;
		case  "10011010": valor_binario = 154; break;
		case  "10011011": valor_binario = 155; break;
		case  "10011100": valor_binario = 156; break;
		case  "10011101": valor_binario = 157; break;
		case  "10011110": valor_binario = 158; break;
		case  "10011111": valor_binario = 159; break;
		case  "10100000": valor_binario = 160; break;
		case  "10100001": valor_binario = 161; break;
		case  "10100010": valor_binario = 162; break;
		case  "10100011": valor_binario = 163; break;
		case  "10100100": valor_binario = 164; break;
		case  "10100101": valor_binario = 165; break;
		case  "10100110": valor_binario = 166; break;
		case  "10100111": valor_binario = 167; break;
		case  "10101000": valor_binario = 168; break;
		case  "10101001": valor_binario = 169; break;
		case  "10101010": valor_binario = 170; break;
		case  "10101011": valor_binario = 171; break;
		case  "10101100": valor_binario = 172; break;
		case  "10101101": valor_binario = 173; break;
		case  "10101110": valor_binario = 174; break;
		case  "10101111": valor_binario = 175; break;
		case  "10110000": valor_binario = 176; break;
		case  "10110001": valor_binario = 177; break;
		case  "10110010": valor_binario = 178; break;
		case  "10110011": valor_binario = 179; break;
		case  "10110100": valor_binario = 180; break;
		case  "10110101": valor_binario = 181; break;
		case  "10110110": valor_binario = 182; break;
		case  "10110111": valor_binario = 183; break;
		case  "10111000": valor_binario = 184; break;
		case  "10111001": valor_binario = 185; break;
		case  "10111010": valor_binario = 186; break;
		case  "10111011": valor_binario = 187; break;
		case  "10111100": valor_binario = 188; break;
		case  "10111101": valor_binario = 189; break;
		case  "10111110": valor_binario = 190; break;
		case  "10111111": valor_binario = 191; break;
		case  "11000000": valor_binario = 192; break;
		case  "11000001": valor_binario = 193; break;
		case  "11000010": valor_binario = 194; break;
		case  "11000011": valor_binario = 195; break;
		case  "11000100": valor_binario = 196; break;
		case  "11000101": valor_binario = 197; break;
		case  "11000110": valor_binario = 198; break;
		case  "11000111": valor_binario = 199; break;
		case  "11001000": valor_binario = 200; break;
		case  "11001001": valor_binario = 201; break;
		case  "11001010": valor_binario = 202; break;
		case  "11001011": valor_binario = 203; break;
		case  "11001100": valor_binario = 204; break;
		case  "11001101": valor_binario = 205; break;
		case  "11001110": valor_binario = 206; break;
		case  "11001111": valor_binario = 207; break;
		case  "11010000": valor_binario = 208; break;
		case  "11010001": valor_binario = 209; break;
		case  "11010010": valor_binario = 210; break;
		case  "11010011": valor_binario = 211; break;
		case  "11010100": valor_binario = 212; break;
		case  "11010101": valor_binario = 213; break;
		case  "11010110": valor_binario = 214; break;
		case  "11010111": valor_binario = 215; break;
		case  "11011000": valor_binario = 216; break;
		case  "11011001": valor_binario = 217; break;
		case  "11011010": valor_binario = 218; break;
		case  "11011011": valor_binario = 219; break;
		case  "11011100": valor_binario = 220; break;
		case  "11011101": valor_binario = 221; break;
		case  "11011110": valor_binario = 222; break;
		case  "11011111": valor_binario = 223; break;
		case  "11100000": valor_binario = 224; break;
		case  "11100001": valor_binario = 225; break;
		case  "11100010": valor_binario = 226; break;
		case  "11100011": valor_binario = 227; break;
		case  "11100100": valor_binario = 228; break;
		case  "11100101": valor_binario = 229; break;
		case  "11100110": valor_binario = 230; break;
		case  "11100111": valor_binario = 231; break;
		case  "11101000": valor_binario = 232; break;
		case  "11101001": valor_binario = 233; break;
		case  "11101010": valor_binario = 234; break;
		case  "11101011": valor_binario = 235; break;
		case  "11101100": valor_binario = 236; break;
		case  "11101101": valor_binario = 237; break;
		case  "11101110": valor_binario = 238; break;
		case  "11101111": valor_binario = 239; break;
		case  "11110000": valor_binario = 240; break;
		case  "11110001": valor_binario = 241; break;
		case  "11110010": valor_binario = 242; break;
		case  "11110011": valor_binario = 243; break;
		case  "11110100": valor_binario = 244; break;
		case  "11110101": valor_binario = 245; break;
		case  "11110110": valor_binario = 246; break;
		case  "11110111": valor_binario = 247; break;
		case  "11111000": valor_binario = 248; break;
		case  "11111001": valor_binario = 249; break;
		case  "11111010": valor_binario = 250; break;
		case  "11111011": valor_binario = 251; break;
		case  "11111100": valor_binario = 252; break;
		case  "11111101": valor_binario = 253; break;
		case  "11111110": valor_binario = 254; break;
		case  "11111111": valor_binario = 255; break;
		default: valor_binario = "11111111";
	}
	return valor_binario;
}

			function encriptaPassword(clave){
				var llave = "01011101000110100101110110110111011011011011000111010110101001101001101011010110";
				var clave_encryptada = "";
				var valor_binario = "";
				var valor_hex = "";
				var cadena_8bits = "";
				var cadena_ceros = "";
				var clave_encryptada_hex = "";
				var a = 0;
				var valor_asci = 0;
				var largo = 0;
				var ceros = 0;
				var caracter = '';
				var caracter_valor_binario = '';
				var caracter_llave_binaria = '';
				largo = clave.length;
				for(a = 0; a < largo; a++){
					caracter = clave.substring(a,( a + 1 ) ) ;
					valor_asci = ord(caracter);
					valor_binario = valor_binario + "" + gf_ascii_to_binary(valor_asci);
				}
				if( ( 80 - valor_binario.length ) > 0 ){
					ceros = 80 - valor_binario.length;
					cadena_ceros = "";
					for(a = 0; a < ceros; a++){
						 cadena_ceros = cadena_ceros + "0";
					}
					valor_binario =  cadena_ceros + "" + valor_binario;
				}
				var j = 0;
				for(a = 0; a < valor_binario.length; a++){
					caracter_valor_binario = valor_binario.substring(a,(a+1));
					caracter_llave_binaria = llave.substring(j,(j+1));
					if( j == llave.length -1 ){
						j = -1;
					}
					j ++;
					if(( parseInt( caracter_valor_binario ) + parseInt( caracter_llave_binaria ) ) == 1){
						caracter = "1";
					}else{
						caracter = "0";
					}
					clave_encryptada = clave_encryptada + "" + caracter;
				}
				var b= 0;
				var total = valor_binario.length / 8 ;
				for(a = 0; a < total; a++){
					if( a === 0 ){
					  cadena_8bits =  clave_encryptada.substring( 0, ( b + 8 ) );
					}else{
					  cadena_8bits =  clave_encryptada.substring( b, ( b + 8 ) );
					}
					b = b + 8;
					valor_hex = gf_binary_to_hex(cadena_8bits);
					clave_encryptada_hex = clave_encryptada_hex + "" + valor_hex;
				}
				return clave_encryptada_hex;
			}
			


function desencriptaPassword(clave){
	var llave =  "01011101000110100101110110110111011011011011000111010110101001101001101011010110";
	var llave2 = "10100010111001011010001001001000100100100100111000101001010110010110010100101001";
	var a = 0;
	var caracter = "";
	var valor_binary = "";
	var valor_binary_cadena = "";
	var valor_llave_cadena = "";
	var valor_cadena_nueva = "";
	var cadena = "";
	for( a = 0; a < clave.length; a ++ ){
		caracter = clave.substring( a , a + 2 );
		a = a + 1;
		valor_binary = valor_binary + "" + gf_hex_to_binary( caracter );
	}
	var j = 0;
	for( a = 0; a < valor_binary.length; a ++ , j++){
		valor_binary_cadena = valor_binary.substring( a , a + 1 );
		valor_llave_cadena = llave.substring( j , j + 1 );
		if( j == llave.length-1 ){
			j = -1;
		}
		if( parseInt( valor_binary_cadena ) === parseInt( valor_llave_cadena ) ){
			caracter = "0";
		}else{
			caracter = "1";
		}
		valor_cadena_nueva = valor_cadena_nueva + caracter;
	}
	var b = 8;
	for( a = 0; a < valor_cadena_nueva.length; a ++ ){
		caracter = valor_cadena_nueva.substring( a, b );
		a = b-1;
		b = b + 8;
		if( !/00000000/.test( caracter ) ){
			cadena = cadena + String.fromCharCode( gf_binary_to_ascii( caracter ) );
		}
	}
	return cadena;
}
		
exports.encripta = encriptaPassword;
exports.desencripta = desencriptaPassword;